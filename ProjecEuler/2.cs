using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/*
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */

/*
 * Much thanks to Jon Skeet on StackOverflow on this one. I had originally implemented it differently with some loops for getting the numbers and then set out to optimize it after. 
 * I absolutely love this approach to the issue and learned something new with this solution.
 * 
 * http://stackoverflow.com/questions/8628698/create-fibonacci-series-using-lambda-operator
 */

namespace ProjecEuler
{
    class _2
    {
        public static void Solve()
        {
            long sum = Fibonacci().TakeWhile(x => x < 4000000L).Where(x => x % 2L == 0L).Sum();

            Console.WriteLine(sum.ToString());
        }

        private static IEnumerable<long> Fibonacci()
        {
            long current = 0;
            long next = 1;

            while(true)
            {
                yield return current;
                long temp = next;
                next = current + next;
                current = temp;
            }
        }

    }
}
